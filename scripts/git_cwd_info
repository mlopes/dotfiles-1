#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Emits Git metadata for use in a Zsh prompt.
#
# AUTHOR:
#    Ben Hoskings
#   https://github.com/benhoskings/dot-files/blob/master/files/bin/git_cwd_info
#
# MODIFIED:
#    Geoffrey Grosenbach http://peepcode.com

# The methods that get called more than once are memoized.

if ARGV[0] == 'zsh'
    BLUE="\%{\033[0;34m\%}"
    GREEN="\%{\033[0;32m\%}"
    GRAY="\%{\033[0;37m\%}"
    LIGHT_GRAY="\%{\033[0;37m\%}"
    LIGHT_GREEN="\%{\033[1;32m\%}"
    LIGHT_BLUE="\%{\033[1;34m\%}"
    LIGHT_CYAN="\%{\033[1;36m\%}"
    YELLOW="\%{\033[1;33m\%}"
    WHITE="\%{\033[1;37m\%}"
    RED="\%{\033[0;31m\%}"
    NO_COLOUR="\%{\033[0m\%}"
else
    BLUE="\033[0;34m"
    GREEN="\033[0;32m"
    GRAY="\033[0;37m"
    LIGHT_GRAY="\033[0;37m"
    LIGHT_GREEN="\033[1;32m"
    LIGHT_BLUE="\033[1;34m"
    LIGHT_CYAN="\033[1;36m"
    YELLOW="\033[1;33m"
    WHITE="\033[1;37m"
    RED="\033[0;31m"
    NO_COLOUR="\033[0m"
end

def git_repo_path
  @git_repo_path ||= `git rev-parse --git-dir 2>/dev/null`.strip
end

def in_git_repo
  !git_repo_path.empty? &&
  git_repo_path != '~' &&
  git_repo_path != "#{ENV['HOME']}/.git"
end

def git_current_branch
  path = File.dirname(__FILE__)
  @git_current_branch ||= `#{path}/git_current_branch`.chomp
end

def git_parse_branch
  git_current_branch.gsub /((^|\/)[^\/])([^\/]*)\//, '\1/'
end

def git_head_commit_id
  `git rev-parse --short HEAD 2>/dev/null`.strip
end

def git_cwd_dirty
  " #{RED}âœ—" unless git_repo_path == '.' || `git ls-files -m`.strip.empty?
end

def rebasing_etc
  if File.exists?(File.join(git_repo_path, 'BISECT_LOG'))
    "+bisect"
  elsif File.exists?(File.join(git_repo_path, 'MERGE_HEAD'))
    "+merge"
  elsif %w[rebase rebase-apply rebase-merge ../.dotest].any? {|d| File.exists?(File.join(git_repo_path, d)) }
    "+rebase"
  end
end

def nr_of_pending_changes
    if git_current_branch
        git_dir=`git rev-parse --git-dir`.chomp
        if File.exist?(git_dir+"/refs/remotes/origin/#{git_current_branch}")
            changes = `git log --oneline origin/#{git_current_branch}..#{git_current_branch} | wc -l`.chomp
            if changes=="0"
                ""
            else
                ":#{GREEN}#{changes}"
            end
        else
            ":#{RED}!"
        end
    end
end

if in_git_repo
  print "#{GRAY}#{git_parse_branch}#{nr_of_pending_changes}#{rebasing_etc}#{git_cwd_dirty}#{NO_COLOUR}"
end
